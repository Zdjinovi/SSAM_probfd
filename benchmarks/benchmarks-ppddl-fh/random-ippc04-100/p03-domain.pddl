(define (domain prob_domain) 
 (:requirements :strips :probabilistic-effects) 
  (:types horizon-value - object) (:constants YS SY SF NO EV SZ UQ WE VA VY )
 (:predicates (horizon ?h - horizon-value) (horizon-decrement ?h0 ?h1 - horizon-value) 
	 (KB ?X ) 
	 (DJ ?X ?Y ) 
	 (WY ?X ) 
	 (QF ?X ) 
	 (DL ?X ?Y ) 
(clear)
(not-clear)
 )
(:functions (total-cost))
(:action TNW
 :parameters (?hcur ?hnew - horizon-value ?X ?Y )
 :precondition (and (horizon ?hcur) (horizon-decrement ?hcur ?hnew) 
		 (DL ?X ?Y) 
  )
 :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (probabilistic 
		 100/100 (and (QF ?X) )  
          ))
 )
(:action ORE
 :parameters (?hcur ?hnew - horizon-value ?X )
 :precondition (and (horizon ?hcur) (horizon-decrement ?hcur ?hnew) 
		 (QF ?X) 
		 (WY ?X) 
  )
 :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (probabilistic 
		 100/100 (and (not (QF ?X)) )  
          ))
 )
(:action BED
 :parameters (?hcur ?hnew - horizon-value ?X )
 :precondition (and (horizon ?hcur) (horizon-decrement ?hcur ?hnew) 
		 (DJ ?X ?X) 
  )
 :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (probabilistic 
		 100/100 (and (not (DJ ?X ?X)) )  
          ))
 )
(:action GKO
 :parameters (?hcur ?hnew - horizon-value ?X ?Y ?Z )
 :precondition (and (horizon ?hcur) (horizon-decrement ?hcur ?hnew) 
		 (DL ?Z ?X) 
  )
 :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (probabilistic 
		 89/100 (and (DL ?Z ?Y) (not (DL ?Z ?X)) )  
		 11/100 (and (KB ?X) )  
          ))
 )
(:action NNN
 :parameters (?hcur ?hnew - horizon-value ?X ?Y ?Z )
 :precondition (and (horizon ?hcur) (horizon-decrement ?hcur ?hnew) 
		 (WY ?Y) 
		 (DJ ?X ?Y) 
		 (DJ ?X ?Z) 
  )
 :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (probabilistic 
		 100/100 (and (QF ?Z) (KB ?X) (QF ?Y) )  
          ))
 )
(:action reset1 
 :parameters (?hcur ?hnew - horizon-value)
:precondition (and (horizon ?hcur) (horizon-decrement ?hcur ?hnew) (not-clear))
 :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1)  
	     (forall (?x) (and 
      (not (KB ?x)) 
      (not (DJ ?x YS)) 
      (not (DJ ?x SY)) 
      (not (DJ ?x SF)) 
      (not (DJ ?x NO)) 
      (not (DJ ?x EV)) 
      (not (DJ ?x SZ)) 
      (not (DJ ?x UQ)) 
      (not (DJ ?x WE)) 
      (not (DJ ?x VA)) 
      (not (DJ ?x VY)) 
      (not (WY ?x)) 
      (not (QF ?x)) 
      (not (DL ?x YS)) 
      (not (DL ?x SY)) 
      (not (DL ?x SF)) 
      (not (DL ?x NO)) 
      (not (DL ?x EV)) 
      (not (DL ?x SZ)) 
      (not (DL ?x UQ)) 
      (not (DL ?x WE)) 
      (not (DL ?x VA)) 
      (not (DL ?x VY)) 
))
(not (not-clear))
(clear)))

(:action reset2 
 :parameters (?hcur ?hnew - horizon-value)
:precondition (and (horizon ?hcur) (horizon-decrement ?hcur ?hnew) (clear)) 
 :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1)  (not-clear)
              (not (clear))
(DJ VA SY) 
(KB YS) 
(KB WE) 
(DL SY YS) 
(DL NO VA) 
(QF NO) 
(DJ UQ UQ) 
(WY NO) 
(KB NO) 
(DL UQ SZ) 
(DJ YS VA) 
(WY WE) 
(KB UQ) 
(QF UQ) 
(KB SY) 
(QF WE) 
(DJ EV SF) 
(DJ SZ SY) 
(QF SF) 
(DL SZ WE) 
)))
