(define
  (domain prob_domain)
  (:requirements :strips :probabilistic-effects)
  (:types horizon-value - object rndobj)
  (:constants horzn1 - horizon-value  WR TR YJ FJ DN JQ OK ED CI KG - rndobj)
  (:predicates (horizon ?h - horizon-value) (horizon-decrement ?h0 ?h1 ?h2 - horizon-value)
    (XG ?X ?Y)
    (WI ?X ?Y)
    (LS ?X)
    (QG ?X)
    (GO ?X)
    (clear)
    (not-clear)
  )
  (:functions (total-cost))
  (:action KZH
    :parameters (?hcur ?hnew - horizon-value ?X ?Y - rndobj)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (WI ?X ?X))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (probabilistic 87/100 (and (XG ?Y ?X) (QG ?X)) 13/100 (and (not (WI ?X ?X)) (WI ?Y ?Y) (WI ?Y ?X))))
  )
  (:action MMF
    :parameters (?hcur ?hnew - horizon-value ?X ?Y ?Z - rndobj)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (XG ?X ?X))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (probabilistic 100/100 (and (QG ?Z) (LS ?Y) (WI ?Y ?Z))))
  )
  (:action VLC
    :parameters (?hcur ?hnew - horizon-value ?X ?Y - rndobj)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (LS ?X) (WI ?Y ?X))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (probabilistic 100/100 (and (XG ?X ?X))))
  )
  (:action EQI
    :parameters (?hcur ?hnew - horizon-value ?X ?Y - rndobj)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (LS ?Y) (XG ?X ?X))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (probabilistic 24/100 (and (not (LS ?Y)) (WI ?Y ?Y) (not (XG ?X ?X))) 31/100 (and (XG ?Y ?X) (not (LS ?Y)) (WI ?X ?X)) 45/100 (and (GO ?X) (WI ?X ?Y) (XG ?Y ?Y))))
  )
  (:action RMJ
    :parameters (?hcur ?hnew - horizon-value ?X - rndobj)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (QG ?X) (XG ?X ?X))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (probabilistic 100/100 (and (GO ?X))))
  )
  (:action reset1
    :parameters (?hcur ?hnew - horizon-value)
:precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (not-clear))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (forall (?x) (and (not (XG ?x WR)) (not (XG ?x TR)) (not (XG ?x YJ)) (not (XG ?x FJ)) (not (XG ?x DN)) (not (XG ?x JQ)) (not (XG ?x OK)) (not (XG ?x ED)) (not (XG ?x CI)) (not (XG ?x KG)) (not (WI ?x WR)) (not (WI ?x TR)) (not (WI ?x YJ)) (not (WI ?x FJ)) (not (WI ?x DN)) (not (WI ?x JQ)) (not (WI ?x OK)) (not (WI ?x ED)) (not (WI ?x CI)) (not (WI ?x KG)) (not (LS ?x)) (not (QG ?x)) (not (GO ?x)))) (not (not-clear)) (clear))
  )
  (:action reset2
    :parameters (?hcur ?hnew - horizon-value)
:precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (clear))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (not-clear) (not (clear)) (GO YJ) (WI DN TR) (QG WR) (QG KG) (WI OK KG) (LS TR) (XG ED KG) (QG YJ) (GO ED) (LS JQ) (LS WR) (QG OK) (XG KG OK) (LS ED) (QG CI) (XG FJ YJ) (XG TR CI) (LS DN) (XG TR DN) (WI OK DN))
  )
)