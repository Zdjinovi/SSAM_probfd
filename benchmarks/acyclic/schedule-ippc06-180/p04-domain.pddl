(define
  (domain a-schedule-problem74)
  (:requirements :probabilistic-effects :negative-preconditions :typing)
  (:types horizon-value - object class packet timestep phase - object)
  (:constants horzn1 - horizon-value  C0 C1 - class Arrivals-and-updating Cleanup-and-service - phase U0 U1 U2 U3 - timestep P0 P1 P2 P3 P4 P5 - packet)
  (:predicates (horizon ?h - horizon-value) (horizon-decrement ?h0 ?h1 ?h2 - horizon-value)
    (current-phase ?s - phase)
    (packet-class ?p - packet ?c - class)
    (time-to-live ?p - packet ?t - timestep)
    (available ?p - packet)
    (current-timestep ?t - timestep)
    (next-timestep ?t0 ?t1 - timestep)
    (need-to-process-arrivals ?c - class)
    (served ?c - class)
    (alive)
  )
  (:action process-arrivals-C0
    :parameters (?hcur ?hnew - horizon-value ?arriving-packet - packet ?t - timestep)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (current-phase Arrivals-and-updating) (available ?arriving-packet) (need-to-process-arrivals C0) (current-timestep ?t))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (not (need-to-process-arrivals C0)) (probabilistic 11/125 (and (not (available ?arriving-packet)) (time-to-live ?arriving-packet ?t) (packet-class ?arriving-packet C0))))
  )
  (:action process-arrivals
    :parameters (?hcur ?hnew - horizon-value ?c - class ?arriving-packet - packet ?t - timestep)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (not (= ?c C0)) (current-phase Arrivals-and-updating) (available ?arriving-packet) (need-to-process-arrivals ?c) (current-timestep ?t))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (not (need-to-process-arrivals ?c)) (probabilistic 1 (and (not (available ?arriving-packet)) (time-to-live ?arriving-packet ?t) (packet-class ?arriving-packet ?c))))
  )
  (:action time-update
    :parameters (?hcur ?hnew - horizon-value ?t0 ?t1 - timestep)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (current-phase Arrivals-and-updating) (current-timestep ?t0) (next-timestep ?t0 ?t1) (not (need-to-process-arrivals C0)) (not (need-to-process-arrivals C1)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (not (current-phase Arrivals-and-updating)) (current-phase Cleanup-and-service) (not (current-timestep ?t0)) (current-timestep ?t1))
  )
  (:action reclaim-packet-C0
    :parameters (?hcur ?hnew - horizon-value ?p - packet ?t - timestep)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (current-phase Cleanup-and-service) (packet-class ?p C0) (time-to-live ?p ?t))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (not (packet-class ?p C0)) (not (time-to-live ?p ?t)) (available ?p) (probabilistic 7/10 (and (not (alive)))))
  )
  (:action reclaim-packet-C1
    :parameters (?hcur ?hnew - horizon-value ?p - packet ?t - timestep)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (current-phase Cleanup-and-service) (packet-class ?p C1) (time-to-live ?p ?t))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (not (packet-class ?p C1)) (not (time-to-live ?p ?t)) (available ?p) (probabilistic 1/200 (and (not (alive)))))
  )
  (:action packet-serve
    :parameters (?hcur ?hnew - horizon-value ?p - packet ?c - class ?t - timestep)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (current-phase Cleanup-and-service) (packet-class ?p ?c) (current-timestep ?t) (not (time-to-live P0 ?t)) (not (time-to-live P1 ?t)) (not (time-to-live P2 ?t)) (not (time-to-live P3 ?t)) (not (time-to-live P4 ?t)) (not (time-to-live P5 ?t)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (forall (?c1 - class) (need-to-process-arrivals ?c1)) (not (current-phase Cleanup-and-service)) (current-phase Arrivals-and-updating) (served ?c) (not (packet-class ?p ?c)) (forall (?u - timestep) (not (time-to-live ?p ?u))) (available ?p))
  )
  (:action serve-nothing
    :parameters (?hcur ?hnew - horizon-value ?t - timestep)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (current-phase Cleanup-and-service) (current-timestep ?t) (not (time-to-live P0 ?t)) (not (time-to-live P1 ?t)) (not (time-to-live P2 ?t)) (not (time-to-live P3 ?t)) (not (time-to-live P4 ?t)) (not (time-to-live P5 ?t)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (forall (?c1 - class) (need-to-process-arrivals ?c1)) (not (current-phase Cleanup-and-service)) (current-phase Arrivals-and-updating))
  )
)