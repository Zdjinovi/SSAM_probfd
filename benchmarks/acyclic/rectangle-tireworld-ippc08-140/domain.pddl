(define
  (domain rectangle-world)
  (:requirements :typing :strips :negative-preconditions :probabilistic-effects)
  (:functions (total-cost))
  (:types horizon-value - object int)
   (:constants horzn1 horzn10 - horizon-value) (:predicates (horizon ?h - horizon-value) (horizon-decrement ?h0 ?h1 ?h2 - horizon-value)
    (xpos ?x - int)
    (ypos ?y - int)
    (next ?i ?j - int)
    (safeX ?x - int)
    (safeY ?y - int)
    (unsafe ?x ?y - int)
    (dead)
  )
  (:action move-U-safe-safe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?y ?y2) (safeX ?x) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (not (ypos ?y)) (ypos ?y2))
  )
  (:action move-D-safe-safe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?y2 ?y) (safeX ?x) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (not (ypos ?y)) (ypos ?y2))
  )
  (:action move-R-safe-safe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x ?x2) (safeY ?y) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (not (xpos ?x)) (xpos ?x2))
  )
  (:action move-L-safe-safe
    :parameters (?hcur ?hnew - horizon-value ?X ?y ?x2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x2 ?x) (safeY ?y) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (not (xpos ?x)) (xpos ?x2))
  )
  (:action move-U-safe-unsafe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?y ?y2) (safeX ?x) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (not (ypos ?y)) (ypos ?y2))
  )
  (:action move-D-safe-unsafe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?y2 ?y) (safeX ?x) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (not (ypos ?y)) (ypos ?y2))
  )
  (:action move-R-safe-unsafe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x ?x2) (safeY ?y) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (not (xpos ?x)) (xpos ?x2))
  )
  (:action move-L-safe-unsafe
    :parameters (?hcur ?hnew - horizon-value ?X ?y ?x2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x2 ?x) (safeY ?y) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (not (xpos ?x)) (xpos ?x2))
  )
  (:action move-U-unsafe-safe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?y ?y2) (not (safeX ?x)) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (probabilistic .8 (and (not (ypos ?y)) (ypos ?y2))))
  )
  (:action move-D-unsafe-safe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?y2 ?y) (not (safeX ?x)) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (probabilistic .8 (and (not (ypos ?y)) (ypos ?y2))))
  )
  (:action move-R-unsafe-safe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x ?x2) (not (safeY ?y)) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (probabilistic .8 (and (not (xpos ?x)) (xpos ?x2))))
  )
  (:action move-L-unsafe-safe
    :parameters (?hcur ?hnew - horizon-value ?X ?y ?x2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x2 ?x) (not (safeY ?y)) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (probabilistic .8 (and (not (xpos ?x)) (xpos ?x2))))
  )
  (:action move-U-unsafe-unsafe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?y ?y2) (not (safeX ?x)) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (probabilistic .8 (and (not (ypos ?y)) (ypos ?y2))))
  )
  (:action move-D-unsafe-unsafe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?y2 ?y) (not (safeX ?x)) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (probabilistic .8 (and (not (ypos ?y)) (ypos ?y2))))
  )
  (:action move-R-unsafe-unsafe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x ?x2) (not (safeY ?y)) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (probabilistic .8 (and (not (xpos ?x)) (xpos ?x2))))
  )
  (:action move-L-unsafe-unsafe
    :parameters (?hcur ?hnew - horizon-value ?X ?y ?x2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x2 ?x) (not (safeY ?y)) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (probabilistic .8 (and (not (xpos ?x)) (xpos ?x2))))
  )
  (:action move-UR-safe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x ?x2) (next ?y ?y2) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (probabilistic .8 (and (not (xpos ?x)) (not (ypos ?y)) (xpos ?x2) (ypos ?y2)) .2 (dead)))
  )
  (:action move-UL-safe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x ?x2) (next ?y2 ?y) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (probabilistic .8 (and (not (xpos ?x)) (not (ypos ?y)) (xpos ?x2) (ypos ?y2)) .2 (dead)))
  )
  (:action move-DR-safe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x2 ?x) (next ?y ?y2) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (probabilistic .8 (and (not (xpos ?x)) (not (ypos ?y)) (xpos ?x2) (ypos ?y2)) .2 (dead)))
  )
  (:action move-DL-safe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x2 ?x) (next ?y2 ?y) (not (unsafe ?x ?y)))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (probabilistic .8 (and (not (xpos ?x)) (not (ypos ?y)) (xpos ?x2) (ypos ?y2)) .2 (dead)))
  )
  (:action move-UR-unsafe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x ?x2) (next ?y ?y2) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (probabilistic .8 (and (not (xpos ?x)) (not (ypos ?y)) (xpos ?x2) (ypos ?y2)) .2 (dead)))
  )
  (:action move-UL-unsafe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x ?x2) (next ?y2 ?y) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (probabilistic .8 (and (not (xpos ?x)) (not (ypos ?y)) (xpos ?x2) (ypos ?y2)) .2 (dead)))
  )
  (:action move-DR-unsafe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x2 ?x) (next ?y ?y2) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (probabilistic .8 (and (not (xpos ?x)) (not (ypos ?y)) (xpos ?x2) (ypos ?y2)) .2 (dead)))
  )
  (:action move-DL-unsafe
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn10 ?hnew) (not (dead)) (xpos ?x) (ypos ?y) (next ?x2 ?x) (next ?y2 ?y) (unsafe ?x ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 10) (dead) (probabilistic .8 (and (not (xpos ?x)) (not (ypos ?y)) (xpos ?x2) (ypos ?y2)) .2 (dead)))
  )
  (:action ghostTeleport
    :parameters (?hcur ?hnew - horizon-value ?x ?y ?x2 ?y2 - int)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (dead) (xpos ?x) (ypos ?y))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (not (xpos ?x)) (not (ypos ?y)) (xpos ?x2) (ypos ?y2))
  )
)