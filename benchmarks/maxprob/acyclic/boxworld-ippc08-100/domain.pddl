(define
  (domain boxworld)
  (:requirements :typing :probabilistic-effects :negative-preconditions)
  (:types horizon-value - object city box truck plane)
   (:constants horzn1 - horizon-value) (:predicates (horizon ?h - horizon-value) (horizon-decrement ?h0 ?h1 ?h2 - horizon-value)
    (box-at-city ?b - box ?c - city)
    (truck-at-city ?t - truck ?c - city)
    (box-on-truck ?b - box ?t - truck)
    (plane-at-city ?p - plane ?c - city)
    (box-on-plane ?b - box ?p - plane)
    (destination ?b - box ?dst - city)
    (can-drive ?src - city ?dst - city)
    (wrong-drive1 ?src - city ?wrongdst - city)
    (wrong-drive2 ?src - city ?wrongdst - city)
    (wrong-drive3 ?src - city ?wrongdst - city)
    (can-fly ?src - city ?dst - city)
  )
  (:functions (total-cost))
  (:action load-box-on-truck-in-city
    :parameters (?hcur ?hnew - horizon-value ?b - box ?t - truck ?c - city)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (box-at-city ?b ?c) (not (destination ?b ?c)) (truck-at-city ?t ?c))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (box-on-truck ?b ?t) (not (box-at-city ?b ?c)))
  )
  (:action unload-box-from-truck-in-city
    :parameters (?hcur ?hnew - horizon-value ?b - box ?t - truck ?c - city)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (box-on-truck ?b ?t) (truck-at-city ?t ?c))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (box-at-city ?b ?c) (not (box-on-truck ?b ?t)))
  )
  (:action load-box-on-plane-in-city
    :parameters (?hcur ?hnew - horizon-value ?b - box ?p - plane ?c - city)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (box-at-city ?b ?c) (not (destination ?b ?c)) (plane-at-city ?p ?c))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (box-on-plane ?b ?p) (not (box-at-city ?b ?c)))
  )
  (:action unload-box-from-plane-in-city
    :parameters (?hcur ?hnew - horizon-value ?b - box ?p - plane ?c - city)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (box-on-plane ?b ?p) (plane-at-city ?p ?c))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (box-at-city ?b ?c) (not (box-on-plane ?b ?p)))
  )
  (:action drive-truck
    :parameters (?hcur ?hnew - horizon-value ?t - truck ?src - city ?dst ?w1 ?w2 ?w3 - city)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (truck-at-city ?t ?src) (can-drive ?src ?dst) (wrong-drive1 ?src ?w1) (wrong-drive2 ?src ?w2) (wrong-drive3 ?src ?w3))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (not (truck-at-city ?t ?src)) (probabilistic 0.2 (probabilistic 1/3 (truck-at-city ?t ?w1) 1/3 (truck-at-city ?t ?w2) 1/3 (truck-at-city ?t ?w3)) 0.8 (truck-at-city ?t ?dst)))
  )
  (:action fly-plane
    :parameters (?hcur ?hnew - horizon-value ?p - plane ?src - city ?dst - city)
    :precondition (and (horizon ?hcur) (horizon-decrement ?hcur horzn1 ?hnew) (plane-at-city ?p ?src) (can-fly ?src ?dst))
    :effect (and (not (horizon ?hcur)) (horizon ?hnew) (increase (total-cost) 1) (not (plane-at-city ?p ?src)) (plane-at-city ?p ?dst))
  )
)